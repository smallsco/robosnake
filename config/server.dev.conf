log_format timed_combined '$remote_addr - $remote_user [$time_local] ' '"$request" $status $body_bytes_sent ' '"$http_referer" "$http_user_agent" ' '$request_time';

lua_package_path "/var/luasnake/?.lua;;";
lua_need_request_body "on";

init_by_lua_block {

    -- Constants
    MAX_RECURSION_DEPTH = 6
    HUNGER_HEALTH = 40
    LOW_FOOD = 8

    -- Application Modules
    util = require( "util" )
    algorithm = require( "algorithm" )

    -- Third-Party Modules
    cjson = require( "cjson" )
    
}

access_by_lua_block {

    ngx.ctx.startTime = ngx.now()

}

server {

    ##########################################################
    # MAKE SURE THE LUA CODE CACHE IS "ON" FOR PRODUCTION!!! #
    ##########################################################
    lua_code_cache "off";
    
    # nginx config
    listen   5000;
    server_name  localhost;
    
    # Logging
    access_log  /usr/local/openresty/nginx/logs/access.log timed_combined;
    error_log  /usr/local/openresty/nginx/logs/error.log info;
    
    # Routes
    
    # Static. Just here to make our head URL work.
    location /static/ {
        root /var/luasnake;
        try_files $uri =404;
    }
    
    # Ping.
    location /ping {
        default_type "text/html";
        echo "ok";
    }

    # Game start.
    location /start {
        default_type "application/json";
        if ( $request_method != POST ) { return 405; }
        content_by_lua_block {
            ngx.log( ngx.DEBUG, 'Got request data: ' .. ngx.var.request_body )
            response = {
                color = "#5D6D7E",
                headType = "bendr",
                tailType = "fat-rattle"
            }
            ngx.print( cjson.encode( response ) )
            ngx.eof()
            collectgarbage()
            collectgarbage()
        }
    }
    
    # Move. Different behavior here depending on the API version.
    location /move {
        default_type "application/json";
        if ( $request_method != POST ) { return 405; }
        content_by_lua_file "/var/luasnake/robosnake.lua";
    }
    
    # Game end.
    location /end {
        default_type "application/json";
        if ( $request_method != POST ) { return 405; }
        content_by_lua_block {
            ngx.log( ngx.DEBUG, 'Got request data: ' .. ngx.var.request_body )
            ngx.eof()
            collectgarbage()
            collectgarbage()
        }
    }

    location / {
        return 404;
    }

}
